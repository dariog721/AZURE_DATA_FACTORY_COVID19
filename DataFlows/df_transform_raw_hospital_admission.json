{
    "name": "df_transform_raw_hospital_admission",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "ds_raw_hospital_admissions",
                        "type": "DatasetReference"
                    },
                    "name": "HospitalAdmissionSource"
                },
                {
                    "dataset": {
                        "referenceName": "ds_country_lookup",
                        "type": "DatasetReference"
                    },
                    "name": "LookupCountry"
                },
                {
                    "dataset": {
                        "referenceName": "ds_dim_date",
                        "type": "DatasetReference"
                    },
                    "name": "DimDate"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "ds_processed_hospital_admission_weekly",
                        "type": "DatasetReference"
                    },
                    "name": "WeeklySink"
                },
                {
                    "dataset": {
                        "referenceName": "ds_processed_hospital_admission_daily",
                        "type": "DatasetReference"
                    },
                    "name": "DailySink"
                }
            ],
            "transformations": [
                {
                    "name": "SelecRequieredColumns"
                },
                {
                    "name": "JoinLookupContry"
                },
                {
                    "name": "SelectRequieredColLookup"
                },
                {
                    "name": "Splitweeklydayli"
                },
                {
                    "name": "DerivedECDCYearWeek"
                },
                {
                    "name": "Aggdimdate"
                },
                {
                    "name": "JoinWithDate"
                },
                {
                    "name": "PivotDaily"
                },
                {
                    "name": "SortDaily"
                },
                {
                    "name": "PivotWeekly"
                },
                {
                    "name": "sort1"
                },
                {
                    "name": "FinalSelectweekly"
                },
                {
                    "name": "FinalSelectDaily"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          country as string,",
                "          indicator as string,",
                "          date as date,",
                "          year_week as string,",
                "          value as double,",
                "          source as string,",
                "          url as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false) ~> HospitalAdmissionSource",
                "source(output(",
                "          country as string,",
                "          country_code_2_digit as string,",
                "          country_code_3_digit as string,",
                "          continent as string,",
                "          population as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false) ~> LookupCountry",
                "source(output(",
                "          date_key as string,",
                "          date as string,",
                "          year as string,",
                "          month as string,",
                "          day as string,",
                "          day_name as string,",
                "          day_of_year as string,",
                "          week_of_month as string,",
                "          week_of_year as string,",
                "          month_name as string,",
                "          year_month as string,",
                "          year_week as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false) ~> DimDate",
                "HospitalAdmissionSource select(mapColumn(",
                "          country,",
                "          indicator,",
                "          reported_date = date,",
                "          reported_year_week = year_week,",
                "          value,",
                "          source",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> SelecRequieredColumns",
                "SelecRequieredColumns, LookupCountry lookup(SelecRequieredColumns@country == LookupCountry@country,",
                "     multiple: false,",
                "     pickup: 'any',",
                "     broadcast: 'auto')~> JoinLookupContry",
                "JoinLookupContry select(mapColumn(",
                "          country = SelecRequieredColumns@country,",
                "          indicator,",
                "          reported_date,",
                "          reported_year_week,",
                "          value,",
                "          source,",
                "          country_code_2_digit,",
                "          country_code_3_digit,",
                "          population",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> SelectRequieredColLookup",
                "SelectRequieredColLookup split(indicator == 'Weekly new hospital admissions per 100k' || indicator ==  'Weekly new ICU admissions per 100k'\r",
                ",",
                "     disjoint: false) ~> Splitweeklydayli@(Weekly, Daily)",
                "DimDate derive(ecdc_year_week = year + '-W' + lpad(week_of_year, 2, '0')) ~> DerivedECDCYearWeek",
                "DerivedECDCYearWeek aggregate(groupBy(ecdc_year_week),",
                "     week_start_date = min(date),",
                "          week_end_date = max(date)) ~> Aggdimdate",
                "Splitweeklydayli@Weekly, Aggdimdate join(reported_year_week == ecdc_year_week,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> JoinWithDate",
                "Splitweeklydayli@Daily pivot(groupBy(country,",
                "          country_code_2_digit,",
                "          country_code_3_digit,",
                "          reported_date,",
                "          population,",
                "          source),",
                "     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
                "     count = sum(value),",
                "     columnNaming: '$V_$N',",
                "     lateral: true) ~> PivotDaily",
                "PivotDaily sort(desc(reported_date, false),",
                "     asc(country, false)) ~> SortDaily",
                "JoinWithDate pivot(groupBy(country,",
                "          country_code_2_digit,",
                "          country_code_3_digit,",
                "          population,",
                "          reported_year_week,",
                "          week_start_date,",
                "          week_end_date,",
                "          source),",
                "     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
                "     count = sum(value),",
                "     columnNaming: '$V_$N',",
                "     lateral: true) ~> PivotWeekly",
                "PivotWeekly sort(desc(reported_year_week, false),",
                "     asc(country, false)) ~> sort1",
                "sort1 select(mapColumn(",
                "          country,",
                "          country_code_2_digit,",
                "          country_code_3_digit,",
                "          population,",
                "          reported_year_week,",
                "          reported_week_start_date = week_start_date,",
                "          reported_week_end_date = week_end_date,",
                "          source,",
                "          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
                "          new_ICU_hospital_occupancy_count = {Weekly new ICU admissions per 100k_count}",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> FinalSelectweekly",
                "SortDaily select(mapColumn(",
                "          country,",
                "          country_code_2_digit,",
                "          country_code_3_digit,",
                "          reported_date,",
                "          population,",
                "          source,",
                "          hospital_occupancy_count = {Daily hospital occupancy_count},",
                "          icu_occupancy_count = {Daily ICU occupancy_count}",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> FinalSelectDaily",
                "FinalSelectweekly sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     umask: 0022,",
                "     preCommands: [],",
                "     postCommands: [],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> WeeklySink",
                "FinalSelectDaily sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     umask: 0022,",
                "     preCommands: [],",
                "     postCommands: [],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> DailySink"
            ]
        }
    }
}